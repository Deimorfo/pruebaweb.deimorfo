{
  
    
        "post0": {
            "title": "Title",
            "content": "Ajuste Polinomial . blabla bla bla bla bla bla bla bla bla -toc:true-badges: true -comments:true -image: images/padelpy.png . Ajustar la función a un polinomio y ese polinomio derivarlo. . $f(x) approx P_n(x)$ . $ frac{df(x)}{dx} approx frac{dP_n(x)}{dx}$ . si expresamos en términos de diferencias divididas: . $P_n(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}+(x-x_0)(x-x_1) frac{ Delta^2 f(x_0)}{2!h^2}+...+(x-x_0)(x-x_1) frac{ Delta^n f(x_0)}{n!h^n}$ . si n=1 . $P_1(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}$ . $ frac{dP_1(x)}{dx}= frac{ Delta f(x_0)}{h}=F[x_0]$ . $ frac{d^2P_1(x)}{dx}=0$ . $f(x) approx P_n(x)$ . $ frac{df(x)}{dx} approx frac{dP_n(x)}{dx}$ $P_n(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}+(x-x_0)(x-x_1) frac{ Delta^2 f(x_0)}{2!h^2}+...+(x-x_0)(x-x_1) frac{ Delta^n f(x_0)}{n!h^n}$ . $P_1(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}$ . $ frac{dP_1(x)}{dx}= frac{ Delta f(x_0)}{h}=F[x_0]$ . $ frac{d^2P_1(x)}{dx}=0$ . . import numpy as np import matplotlib.pyplot as plt . P=np.array([13.782,12.577,11.565,10.704]) v=np.array([2000,2200,2400,2600]) . from matplotlib import pyplot as plt plt.plot(v,P,&quot;o--&quot;,label =&#39;Puntos&#39;) plt.xlabel(&quot;v [cm^3]&quot;) plt.ylabel(&quot;Presión [atm]&quot;) plt.grid(True) plt.title(&#39;CO2 A 350K&#39;) plt.show() . a=3.6E-6 b=42.8 R=82.1 diff=((-R*350)/(2500-b)**2)+((2*a)/2500**3) diff . -0.004759158711514765 . Aproximación $ frac{f(2600)-f(2400}{200}=-0.0043$ . Error=np.abs((diff+4.3E-3)/diff)*100 Error . 9.647896599956466 . P=np.array([12.577,11.565,10.704]) v=np.array([2200,2400,2600]) . coef=np.polyfit(v,P,2) #Determina los coeficientes del polinomio. 2 es el orden del polinomio coef . array([ 1.88750e-06, -1.37425e-02, 3.36750e+01]) . diffcoef=np.polyder(coef) #Deriva el polinomio diffcoef . array([ 3.77500e-06, -1.37425e-02]) .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/2022/10/09/ajust-polinom.html",
            "relUrl": "/2022/10/09/ajust-polinom.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . $$ begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} $$Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . $Ax = b$ . Donde $ mathbf{A}$ es la matriz de coeficientes . $$ mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] $$$ mathbf{x}$ es el vector de variables desconocidas . $$ mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] $$Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . $$ mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] $$ Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . $ mathbf{x} = mathbf{A^{-1}} mathbf{b} tag{eq.2}$ . $$ begin{equation} mathbf{K}= int_V mathbf{B}^ intercal mathbf{D B} mathrm{d}x mathrm{d}y mathrm{d}z end{equation} $$$$ begin{equation} a + b = c tag{A1} end{equation} $$De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . $$ begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} $$Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2022/10/09/_12_29_SEL.html",
            "relUrl": "/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2022/10/09/_12_29_SEL.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Ajustar la función a un polinomio y ese polinomio derivarlo. . This guide provides more detail about this syntax . $f(x) approx P_n(x)$ . $ frac{df(x)}{dx} approx frac{dP_n(x)}{dx}$ . si expresamos en términos de diferencias divididas: . $P_n(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}+(x-x_0)(x-x_1) frac{ Delta^2 f(x_0)}{2!h^2}+...+(x-x_0)(x-x_1) frac{ Delta^n f(x_0)}{n!h^n}$ . si n=1 . $P_1(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}$ . $ frac{dP_1(x)}{dx}= frac{ Delta f(x_0)}{h}=F[x_0]$ . $ frac{d^2P_1(x)}{dx}=0$ . . import numpy as np import matplotlib.pyplot as plt . P=np.array([13.782,12.577,11.565,10.704]) v=np.array([2000,2200,2400,2600]) . from matplotlib import pyplot as plt plt.plot(v,P,&quot;o--&quot;,label =&#39;Puntos&#39;) plt.xlabel(&quot;v [cm^3]&quot;) plt.ylabel(&quot;Presión [atm]&quot;) plt.grid(True) plt.title(&#39;CO2 A 350K&#39;) plt.show() . a=3.6E-6 b=42.8 R=82.1 diff=((-R*350)/(2500-b)**2)+((2*a)/2500**3) diff . -0.004759158711514765 . Aproximación $ frac{f(2600)-f(2400}{200}=-0.0043$ . Error=np.abs((diff+4.3E-3)/diff)*100 Error . 9.647896599956466 . P=np.array([12.577,11.565,10.704]) v=np.array([2200,2400,2600]) . coef=np.polyfit(v,P,2) #Determina los coeficientes del polinomio. 2 es el orden del polinomio coef . array([ 1.88750e-06, -1.37425e-02, 3.36750e+01]) . diffcoef=np.polyder(coef) #Deriva el polinomio diffcoef . array([ 3.77500e-06, -1.37425e-02]) .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/2022/10/09/_03_29_diff_numerica_Post-(1).html",
            "relUrl": "/2022/10/09/_03_29_diff_numerica_Post-(1).html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "Titulo preset . blabla -toc:true-badges: true -comments:true -image: images/padelpy.png . Ajustar la función a un polinomio y ese polinomio derivarlo. . $f(x) approx P_n(x)$ . $ frac{df(x)}{dx} approx frac{dP_n(x)}{dx}$ . si expresamos en términos de diferencias divididas: . $P_n(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}+(x-x_0)(x-x_1) frac{ Delta^2 f(x_0)}{2!h^2}+...+(x-x_0)(x-x_1) frac{ Delta^n f(x_0)}{n!h^n}$ . si n=1 . $P_1(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}$ . $ frac{dP_1(x)}{dx}= frac{ Delta f(x_0)}{h}=F[x_0]$ . $ frac{d^2P_1(x)}{dx}=0$ . . import numpy as np import matplotlib.pyplot as plt . P=np.array([13.782,12.577,11.565,10.704]) v=np.array([2000,2200,2400,2600]) . from matplotlib import pyplot as plt plt.plot(v,P,&quot;o--&quot;,label =&#39;Puntos&#39;) plt.xlabel(&quot;v [cm^3]&quot;) plt.ylabel(&quot;Presión [atm]&quot;) plt.grid(True) plt.title(&#39;CO2 A 350K&#39;) plt.show() . a=3.6E-6 b=42.8 R=82.1 diff=((-R*350)/(2500-b)**2)+((2*a)/2500**3) diff . -0.004759158711514765 . Aproximación $ frac{f(2600)-f(2400}{200}=-0.0043$ . Error=np.abs((diff+4.3E-3)/diff)*100 Error . 9.647896599956466 . P=np.array([12.577,11.565,10.704]) v=np.array([2200,2400,2600]) . coef=np.polyfit(v,P,2) #Determina los coeficientes del polinomio. 2 es el orden del polinomio coef . array([ 1.88750e-06, -1.37425e-02, 3.36750e+01]) . diffcoef=np.polyder(coef) #Deriva el polinomio diffcoef . array([ 3.77500e-06, -1.37425e-02]) .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/2022/03/29/diff-numerica-Post.html",
            "relUrl": "/2022/03/29/diff-numerica-Post.html",
            "date": " • Mar 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Metodos 1",
            "content": "Ajustar la función a un polinomio y ese polinomio derivarlo. . This guide provides more detail about this syntax . $f(x) approx P_n(x)$ . $ frac{df(x)}{dx} approx frac{dP_n(x)}{dx}$ . si expresamos en términos de diferencias divididas: . $P_n(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}+(x-x_0)(x-x_1) frac{ Delta^2 f(x_0)}{2!h^2}+...+(x-x_0)(x-x_1) frac{ Delta^n f(x_0)}{n!h^n}$ . si n=1 . $P_1(x)=f(x_0)+(x-x_0) frac{ Delta f(x_0)}{h}$ . $ frac{dP_1(x)}{dx}= frac{ Delta f(x_0)}{h}=F[x_0]$ . $ frac{d^2P_1(x)}{dx}=0$ . . import numpy as np import matplotlib.pyplot as plt . P=np.array([13.782,12.577,11.565,10.704]) v=np.array([2000,2200,2400,2600]) . from matplotlib import pyplot as plt plt.plot(v,P,&quot;o--&quot;,label =&#39;Puntos&#39;) plt.xlabel(&quot;v [cm^3]&quot;) plt.ylabel(&quot;Presión [atm]&quot;) plt.grid(True) plt.title(&#39;CO2 A 350K&#39;) plt.show() . a=3.6E-6 b=42.8 R=82.1 diff=((-R*350)/(2500-b)**2)+((2*a)/2500**3) diff . -0.004759158711514765 . Aproximación $ frac{f(2600)-f(2400}{200}=-0.0043$ . Error=np.abs((diff+4.3E-3)/diff)*100 Error . 9.647896599956466 . P=np.array([12.577,11.565,10.704]) v=np.array([2200,2400,2600]) . coef=np.polyfit(v,P,2) #Determina los coeficientes del polinomio. 2 es el orden del polinomio coef . array([ 1.88750e-06, -1.37425e-02, 3.36750e+01]) . diffcoef=np.polyder(coef) #Deriva el polinomio diffcoef . array([ 3.77500e-06, -1.37425e-02]) .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/2022/03/09/nombre.html",
            "relUrl": "/2022/03/09/nombre.html",
            "date": " • Mar 9, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . $$ begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} $$Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . $Ax = b$ . Donde $ mathbf{A}$ es la matriz de coeficientes . $$ mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] $$$ mathbf{x}$ es el vector de variables desconocidas . $$ mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] $$Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . $$ mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] $$ Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . $x = A^{-1}b tag{eq.2}$ . De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . $$ begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} $$Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/12/28/SEL.html",
            "relUrl": "/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/12/28/SEL.html",
            "date": " • Dec 28, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . $$ begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} $$Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . $Ax = b$ . Donde $ mathbf{A}$ es la matriz de coeficientes . $$ mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] $$$ mathbf{x}$ es el vector de variables desconocidas . $$ mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] $$Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . $$ mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] $$ Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . $x = A^{-1}b tag{eq.2}$ . $$ begin{equation} mathbf{K}= int_V mathbf{B}^ intercal mathbf{D B} mathrm{d}x mathrm{d}y mathrm{d}z end{equation} $$$$ begin{equation} a + b = c tag{A1} end{equation} $$De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . $$ begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} $$Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/12/28/SEL.html",
            "relUrl": "/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/12/28/SEL.html",
            "date": " • Dec 28, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . $$ begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} $$Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . $$ begin{gather*} mathbf{Ax = b} end{gather*} $$ Donde $ mathbf{A}$ es la matriz de coeficientes . $$ mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] $$$ mathbf{x}$ es el vector de variables desconocidas . $$ mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] $$Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . $$ mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] $$ Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . $$ begin{equation} mathbf{x = A^{-1}b} end{equation} $$ De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . $$ begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} $$ Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | . &lt;/div&gt; .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/11/28/SEL.html",
            "relUrl": "/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/11/28/SEL.html",
            "date": " • Nov 28, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . $$ begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} $$ Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . $$ begin{equation} mathbf{Ax = b} end{equation} $$ Donde $ mathbf{A}$ es la matriz de coeficientes . $$ mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] $$ $ mathbf{x}$ es el vector de variables desconocidas . $$ mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] $$ Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . $$ mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] $$ Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . $$ begin{equation} mathbf{x = A^{-1}b} end{equation} $$ De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . $$ begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} $$ Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | . &lt;/div&gt; .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/11/28/SEL.html",
            "relUrl": "/sistemas%20de%20ecuaciones%20lineales/fundamentos/teor%C3%ADa/2021/11/28/SEL.html",
            "date": " • Nov 28, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Integracion",
            "content": "Introducci&#243;n a la integraci&#243;n y diferenciaci&#243;n num&#233;rica . Problema de gasto de petr&#243;leo . La siguiente tabla representa el gasto instantáneo del petróleo crudo en un oleoducto (en miles de libras por hora). El flujo se mide a intervalos de 12 minutos. . ¿Cuál es la cantidad de petróleo bombeado en 2 horas y 12 minutos? Calcule el gasto promedio en ese periodo. . import numpy as np import matplotlib.pyplot as plt Tiempo=np.array([0,12,24,36,48,60,72,84,96,108,120,132]) Gasto=np.array([6.2,6,5.9,5.9,6.2,6.4,6.5,6.8,6.9,7.1,7.3,6.9]) th=np.arange(0,2.3,0.2) #un vector que va de 0 a 2.3 en pasos de 0.2, es el tiempo en horas th . array([0. , 0.2, 0.4, 0.6, 0.8, 1. , 1.2, 1.4, 1.6, 1.8, 2. , 2.2]) . plt.plot(th,Gasto,&quot;o--&quot;) plt.xlabel(&quot;Tiempo [Horas]&quot;) plt.ylabel(&quot;Gasto [miles Lbm/h]&quot;) plt.ylim(0,7.4) plt.grid(True) plt.show() . Suma de Riemman . Base de los rectángulos $h= frac {b-a}{n-1}$ . Regla múltiple trapezoidal . La integral de cualquier función que se quiera tabular o aproximar: . $I= frac{h}{2}[f(x_0)+(2 sum_{i=1}^{n-1} f(x_i))+f(x_n)]$ . Para nuestro caso quedaría: . $I= frac{0.2}{2}[G(0)+(2 sum_{i=1}^{n-1} G(i))+G(n)]$ . sum=np.sum(Gasto[1:11]) v=Gasto[1:11] I=(0.2/2)*(Gasto[0]+2*np.sum(v)+Gasto[11]) I . 14.31 . y=np.trapz(Gasto,th) y . 14.310000000000002 . i=(2.2*np.average(Gasto)) i . 14.318333333333335 . Integraci&#243;n y diferenciaci&#243;n num&#233;rica . Derivación: . Una función tabulada se va a aproximar a: . $ frac{df(x)}{dx}= frac{dP_n(x)}{dx}$ . Integración: . Está calculando los valores de las áreas. La magnitud amortigua el posible error de estimación que haya entre dos puntos. . $ int_a^{b} f(x) mathrm{d}x= int_a^{b} P_n(x) mathrm{d}x$ . M&#233;todos de integraci&#243;n . NEWTON-COTES . Datos equiespaciados, abscisas equidistantes. . Pasos: . Dividir en intervalos equidistantes. $x_i=x_0+i( frac{b-a}{n}); i=0,1,2,3,..,n$ . | Aproximar la función f(x) a un polinomio. $f(x) approx P_n(x)$ . | Cuando $f(x) approx P_1(x)$ (se aproxima a un polinomio de orden 1) el método es trapezoidal. Se usa aproximación de Newton. . $P_n(x)=a_0+ sum_{k=0} ^{n-1} a_k prod_{i=0}^{n} x-x_i$ . INSERTAR GRÁFICA Trapecio . $P_1(x)=F[x_0]+F[x_0,x_1](x-x_0)$ . $F[x_0]=f(x_0)$ . $F[x_0,x_1]= frac{f(x_1)-f(x_0)}{x_1-x_0}$ . $F[x_0,x_1,x_2]= frac{F[x_1,x_2]-F[x_0,x_1]}{x_2-x_0}$ . $F[x_0,x_1,x_2,x_3]= frac{F[x_1,x_2,x_3]-F[x_0,x_1,x_2]}{x_3-x_0}$ . Datos equiespaciados . $F[x_0]=f(x_0)$ . $F[x_0,x_1]= frac{f(x_1)-f(x_0)}{h}$ . $F[x_0,x_1,x_2]= frac{f(x_2)-2f(x_1)+f(x_0)}{2h^2}$ . $F[x_0,x_1,x_2,x_3]= frac{f(x_3)-3f(x_2)+3f(x_1)-f(x_0)}{3!h^3}$ . Expresión general para calcular las diferencias divididas de forma directa . Las diferencias divididas se escriben de forma general para datos equiespaciados de la siguiente forma: . $F[x_0,x_1,x_2,...,x_n]= frac{1}{n!} frac{ Delta^nf(x_0)}{h^n}$ . donde $ Delta f(x_0)$ es la llamada diferencia finita de orden n. Los coeficientes se determinan mediante el triángulo de Pascal. Las primeras secuencias son: . $ Delta f(x_0)=f(x_1)-f(x_0)$ . $ Delta^2f(x_0)=f(x_2)-2f(x_1)+f(x_0)$ . $ Delta^3f(x_0)=f(x_3)-3f(x_2)+3f(x_1)-f(x_0)$ . n=1 $f(x) approx P_1(x)$ . $P_1(x)=f(x_0)+ frac{ Delta f(x_0)}{h} (x-x_0)$ . $ int_a^{b} P_1(x)dx= int_a^{b} f(a) + frac{ Delta f(a)}{h} (x-a) dx$ . $s= frac{(x-a)}{h} $ . s(x=a)=0;s(x=b)=1 . $ds= frac {dx}{h}$ . $ int_a^{b} P_1(x)dx= int_0^{1} [f(a) + Delta f(a)s]hds$ . $ int_a^{b} P_1(x)dx= h[f(a)s+ frac{ Delta s^2}{2}]|_0 ^1$ . $ int_a^{b} P_1(x)dx= frac{h}{2}[f(b)+f(a)]$ . n=2 $f(x) approx P_2(x)$ Método de Simpson $ frac{h}{3}$ . INSERTAR GRÁFICA . $x_0=a$ . $x_1=a+ frac {b-a}{n}$ . $x_2=b$ . $ int_a^{b} f(x)dx approx int_a^{b} P_2(x)dx$ . $P_2(x)= f(x_0)+s Delta f(x_0)+ frac{s(s-1)}{2!} Delta^2 f(x_0)$ . Al sustituir . $ int_a^{b} f(x)dx approx int_a^{b} [f(x_0)+s Delta f(x_0)+ frac{s(s-1)}{2!} Delta^2 f(x_0)] ds$ . $I=h[sf(x_0)+ frac {s^2}{2} Delta f(x_0)+ frac {s^3}{3!} Delta^2 f(x_0)- frac {s^2}{4} Delta^2 f(x_0)]|_0 ^2$ . $I=h[2f(x_0)+2 Delta f(x_0)+ frac {1}{3} Delta^2 f(x_0)]$ . $ Delta f(x_0)=f(x_1)-f(x_0)$ . $ Delta^2 f(x_0)=f(x_2)-2f(x_1)+f(x_0)$ . $ int_a^{b} f(x)dx approx frac{h}{3}[f(x_0)+4f(x_1)+f(x_2)]$ . . GAUSS . Abscisas no equidistantes . Ejercicios para desarrollar . . $A_1= frac{1300}{2}[23+9]=20800$ . $A_{2AN}= frac{5}{2}[17+2]=47.5$ . $A_{2R}=47.5$ . $A_{3AN}= frac{6}{2}[57+9]=198$ . $A_{3AR}=90$ . Como $A_3$ NO es lineal la aproximación para n=1 no funciona. Aplicando el método de Simpson: . $I= frac{3}{3}[9+4(6)+57]=90$ .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/jupyter/2021/04/09/Integracion.html",
            "relUrl": "/jupyter/2021/04/09/Integracion.html",
            "date": " • Apr 9, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "a",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/jupyter/2020/02/20/a.html",
            "relUrl": "/jupyter/2020/02/20/a.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Htmltest1",
            "content": "&lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN”&gt; . Reacción-difusión en un lecho empacado . Reacción-difusión en un lecho empacado . (Tomado de Dorfman, K. D., &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. p. 352. Cambridge University Press.)Planteamiento del problema . Consideremos un reactor de lecho empacado como el que se muestra en la figura. En el límite izquierdo del lecho, , la concentración del reactivo es igual a la concentración del reactivo puro, . Hay una pared en el límite derecho del lecho, , con la correspondiente condición de frontera de no flux.Para una reacción de primer orden en el lecho, el balance de masa toma la forma&lt;/img&gt;Figura 1. Ilustración esquemática de un lecho empacado con velocidad de reacción dependiuente de la posiciónSe asume que, debido al tamaño de las partículas, la velocidad de reacción es espacialmente dependiente. Se adopta un modelo sencillo para representarlo, donde donde la reacción se lleva a cabo a plena fuerza en la mitad central de la partícula y es cero en caso contrario. Por ejempo en la primera partícula del leho la velocidad de reacción constante sería:Esta función periódica se repite cinco veces sobre la longitud l de la matriz. El objetivo de este caso de estudio es usar diferencias finitas para observar como el perfil de concentración dentro del reactor depende del módulo de Thiele.Solución . Para trabajar en términos del módulo de Thiele deberíamos redefinir la variables para adimensionalizar la ecuación y expresarla como:La reactividad adimensional tiene la misma dependencia espacial que en la ecuación (3) para cada particula, pero ahora el máximo valor es en lugar de , Para una reacción de primer orden, el módulo de Thiele es:la ecuación para los nodos internos esdonde y es la velocidad de reacción constante evaluada en i. La ecuación para el nodo de la izquierda esLa ecuación para el nodo ficticio en el límite derecho es dada por con lo cual se tiene que . Usando los resultados en la forma discretizada de la ecuación diferencial se tiene dado que la constante es cero en la frontera, este resultado se simplifica aPara a solución a travéz del método de diferencias finitas, vamos a escribir un código en Matlab que resuelva la ecuación diferencial para un módulo de Thiele y numero de nodos dado. n = 41;phi2 = 0.5;c = linear_react(n,phi2); %ir al final de la página para ver el código de la funciónEl comienzo de este programa configura el vector de velocidad de reacción utilizando el operador módulo. El operador módulo ya se ha usado cuando se ha configurado la frecuencia de salida para la integración de IVPs, por ejemplo en el Programa 4.1 del libro. Aquí, se está usando el operador de módulo para mapear la posición en el dominio &quot;global&quot; nuevamente en un dominio &quot;local&quot; . El ciclo for que comienza en la línea 4 recorre los n nodos. El valor de x para ese nodo es . Cuando calculamos el módulo de con 0.2 en la línea 5, tenemos el resto después de dividir por 0.2, lo que asigna el resultado a la primer partícula de catalizador. Por ejemplo, si , la operación x=mod(0,55,0,2) devuelve , ya que puedes dividir 0.2 entre 0.55 dos veces con un resto de 0.15. La línea 6 luego verifica para ver si esta posición está dentro de la partícula de catalizador. Necesitamos tener un operador &quot;y&quot; (&amp;&amp;) para estar seguros de que estamos a la derecha del inicio de la partícula y a la izquierda del final de la partícula Si este es el caso, la constante de velocidad de reacción se establece en 1. Si no, entonces la constante de velocidad de reacción es cero porque inicializamos el vector k para que sea todo ceros en la línea 3. Las líneas 12 y 13 del presente programa implementan el límite de la condición de Dirichlet a la izquierda, mientras que las líneas 19 y 20 implementan la condición de frontera de Neumann a la derecha. Para los nodos interiores, necesitamos la velocidad de reacción local , que es llamado en la línea 16. Finalmente, resolvemos este sistema tridiagonal usando un solucionador de bandas en líneas 21 y 22.El siguiente código genera la figura para el perfil de concentración de este modelo de lecho empacado para diferentes valores del módulos de Thiele.x = linspace(0,1,n);hold onplot(x,linear_react(n,0.5),&#39;o&#39;,&#39;DisplayName&#39;,&#39; phi^2 = 0.5&#39;)plot(x,linear_react(n,1.0),&#39;+&#39;,&#39;DisplayName&#39;,&#39; phi^2 = 1.0&#39;)plot(x,linear_react(n,1.5),&#39;d&#39;,&#39;DisplayName&#39;,&#39; phi^2 = 1.5&#39;)xlabel(&#39;$ tilde{x}$, (adimensional)&#39;,&#39;Interpreter&#39;,&#39;latex&#39;)ylabel(&#39;$ tilde{c}$, (adimensional)&#39;,&#39;Interpreter&#39;,&#39;latex&#39;)legend showhold off Figura 2. Perfil de concentración en un lecho empacado con sitios de reacción distretos como una función del módulo de Thiele.Claramente, a medida que aumenta el módulo de Thiele y la reacción se vuelve dominante sobre la difusión, hay una fuerte reducción en la concentración lejos del contenedor en . Si se observa detenidamente, también se podrá ver la naturaleza discreta de la reacción, ya que sólo tiene lugar en el interior de las partículas. Puede que hayas pensado que el perfil de concentración sería más escalonado con este perfil de reactividad. Sin embargo,recuerda que la difusión tiene lugar tanto en los gránulos de catalizador como en el espacio intersticial.Aunque la reacción solo ocurre dentro de las partículas, la difusión que ocurre tanto dentro de las partículas como en el espacio entre las partículas, está borrando la discreción de la velocidad de reacción.Funciones locales empleadas . function c=linear_react(n,phi2)dx = 1/(n-1);k = zeros(n,1);for i = 1:n x = mod((i-1)*dx,0.2); if x &gt;= 0.05 &amp;&amp; x &lt;= 0.15 k(i) = 1; endendA = zeros(n);b = zeros(n,1);A(1,1) = 1;b(1,1) = 1;for i = 2:n-1 A(i,i-1) = 1; A(i,i) = -2 - dx^2*phi2*k(i); A(i,i+1) = 1;endA(n,n-1) = 1;A(n,n) = -1;A = sparse(A);c = A b;end .",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/2020/02/14/htmltest1.html",
            "relUrl": "/2020/02/14/htmltest1.html",
            "date": " • Feb 14, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://deimorfo.github.io/pruebaweb.deimorfo/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "YOP",
          "content": "This site is built with fastpages, dfgvdfsegegergergergergergergergergergerg . . Busqueda automates the process of creating blog posts via GitHub Actions, so you don’t have to fuss with conversion scripts. A full list of features can be found on GitHub. . You can edit the index.html file to change this content. . Repositorio Metodos . . . .",
          "url": "https://deimorfo.github.io/pruebaweb.deimorfo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deimorfo.github.io/pruebaweb.deimorfo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}